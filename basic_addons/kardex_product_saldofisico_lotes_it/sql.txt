-- View: public.vst_kardex_fisico_acero

-- DROP VIEW public.vst_kardex_fisico_acero;

CREATE OR REPLACE VIEW public.vst_kardex_fisico_acero AS
 SELECT stock_move.product_uom,
    stock_move.move_dest_id,
        CASE
            WHEN sl.usage::text = 'supplier'::text THEN 0::double precision
            ELSE
            CASE
                WHEN original.id <> uomt.id THEN round((stock_move.price_unit * original.factor::double precision / uomt.factor::double precision)::numeric, 6)::double precision
                ELSE stock_move.price_unit
            END
        END AS price_unit,
        CASE
            WHEN product_uom.id <> uomt.id THEN round((stock_move.product_uom_qty::double precision * uomt.factor::double precision / product_uom.factor::double precision)::numeric, 6)
            ELSE stock_move.product_uom_qty
        END AS product_qty,
    stock_move.location_id,
    stock_move.location_dest_id,
    stock_move.picking_type_id,
    stock_move.product_id,
    stock_move.picking_id,
    COALESCE(stock_picking.invoice_id, 0) AS invoice_id,
        CASE
            WHEN stock_picking.es_fecha_kardex THEN stock_picking.fecha_kardex::timestamp without time zone
            ELSE
            CASE
                WHEN ai.date_invoice IS NULL THEN stock_picking.fecha_kardex::timestamp without time zone
                ELSE ai.date_invoice::timestamp without time zone
            END
        END AS date,
    stock_picking.name,
    stock_picking.partner_id,
    einvoice_catalog_12.code AS guia,
    stock_move.analitic_id,
    stock_move.id,
    product_product.default_code,
    stock_move.state AS estado,
    spl.name AS lote
   FROM stock_move
     JOIN product_uom ON stock_move.product_uom = product_uom.id
     LEFT JOIN stock_quant_move_rel sqml ON sqml.move_id = stock_move.id
     LEFT JOIN stock_quant sq ON sq.id = sqml.quant_id
     LEFT JOIN stock_production_lot spl ON spl.id = sq.lot_id
     JOIN stock_picking ON stock_move.picking_id = stock_picking.id
     JOIN stock_picking_type ON stock_picking.picking_type_id = stock_picking_type.id
     JOIN stock_location sl ON sl.id = stock_move.location_dest_id
     JOIN product_product ON stock_move.product_id = product_product.id
     JOIN product_template ON product_product.product_tmpl_id = product_template.id
     LEFT JOIN einvoice_catalog_12 ON stock_picking.einvoice_12 = einvoice_catalog_12.id
     JOIN product_uom uomt ON uomt.id =
        CASE
            WHEN product_template.unidad_kardex IS NOT NULL THEN product_template.unidad_kardex
            ELSE product_template.uom_id
        END
     JOIN product_uom original ON original.id = product_template.uom_id
     LEFT JOIN account_invoice ai ON ai.id = stock_picking.invoice_id
  WHERE (stock_move.state::text = ANY (ARRAY['done'::text, 'assigned'::text])) AND product_template.type::text = 'product'::text AND stock_move.picking_id IS NOT NULL;


CREATE OR REPLACE VIEW vst_kardex_onlyfisico_total_lotes AS 
 SELECT total.product_tmpl_id, total.product_id, total.ubicacion, 
    total.saldo_fisico + total.reservas + total.salida_espera AS stock_disponible, 
    total.saldo_fisico, total.por_ingresar, total.transito, total.salida_espera, 
    total.reservas, 
    total.saldo_fisico + total.por_ingresar + total.transito + total.reservas + total.salida_espera AS previsto, 
    total.estado, 
        CASE
            WHEN (total.saldo_fisico + total.reservas + total.salida_espera) = 0::numeric THEN NULL::integer
            ELSE total.id
        END AS id_stock_disponible, 
        CASE
            WHEN total.saldo_fisico = 0::numeric THEN NULL::integer
            ELSE total.id
        END AS id_saldo_fisico, 
        CASE
            WHEN total.por_ingresar = 0::numeric THEN NULL::integer
            ELSE total.id
        END AS id_por_ingresar, 
        CASE
            WHEN total.transito = 0::numeric THEN NULL::integer
            ELSE total.id
        END AS id_transito, 
        CASE
            WHEN total.salida_espera = 0::numeric THEN NULL::integer
            ELSE total.id
        END AS id_salida_espera, 
        CASE
            WHEN total.reservas = 0::numeric THEN NULL::integer
            ELSE total.id
        END AS id_reservas, 
        CASE
            WHEN (total.saldo_fisico + total.por_ingresar + total.transito + total.reservas + total.salida_espera) = 0::numeric THEN NULL::integer
            ELSE total.id
        END AS id_previsto, total.date::date,total.lote
   FROM (         SELECT a1.product_tmpl_id, a1.product_id, a1.ubicacion, 
                        CASE
                            WHEN a1.estado::text = 'done'::text THEN a1.saldo
                            ELSE 0::numeric
                        END AS saldo_fisico, 
                    0 AS por_ingresar, 0 AS transito, 
                        CASE
                            WHEN a1.estado::text = 'confirmed'::text THEN a1.saldo
                            ELSE 0::numeric
                        END AS salida_espera, 
                        CASE
                            WHEN a1.estado::text = 'assigned'::text THEN a1.saldo
                            ELSE 0::numeric
                        END + 
                        CASE
                            WHEN a1.estado::text = 'partially_available'::text THEN 
                            CASE
                                WHEN a1.qty_done = 0::numeric THEN a1.product_qty
                                ELSE a1.qty_done
                            END
                            ELSE 0::numeric
                        END AS reservas, 
                    a1.estado, a1.id,a1.date, a1.lote
                   FROM ( SELECT distinct pp.product_tmpl_id, 
                            vst_kardex_fisico.product_id, 
                            vst_kardex_fisico.location_id AS ubicacion, 
                            - vst_kardex_fisico.product_qty AS saldo, 
                            vst_kardex_fisico.estado, sp.en_ruta AS ruta, 
                            vst_kardex_fisico.product_qty as qty_done, vst_kardex_fisico.product_qty, vst_kardex_fisico.id,vst_kardex_fisico.date,spl.id as lote
                           FROM vst_kardex_onlyfisico vst_kardex_fisico
                      JOIN product_product pp ON pp.id = vst_kardex_fisico.product_id
                 JOIN stock_move sm ON sm.id = vst_kardex_fisico.id
   LEFT JOIN stock_quant_move_rel sqml on sqml.move_id = sm.id
   LEFT JOIN stock_quant sq on sq.id = sqml.quant_id
   LEFT JOIN stock_production_lot spl on spl.id = sq.lot_id

            JOIN stock_picking sp ON sm.picking_id = sp.id
       
   LEFT JOIN stock_location slt ON slt.id = vst_kardex_fisico.location_id
  WHERE vst_kardex_fisico.date::date IS NOT NULL AND slt.usage::text = 'internal'::text) a1
        UNION ALL 
                 SELECT a2.product_tmpl_id, a2.product_id, a2.ubicacion, 
                        CASE
                            WHEN a2.estado::text = 'done'::text THEN 
                            CASE
                                WHEN a2.mov_interno = true AND a2.ruta = true THEN 0::numeric
                                ELSE a2.saldo
                            END
                            ELSE 0::numeric
                        END AS saldo_fisico, 
                        CASE
                            WHEN a2.estado::text = 'assigned'::text THEN a2.saldo
                            ELSE 0::numeric
                        END + 
                        CASE
                            WHEN a2.estado::text = 'partially_available'::text THEN 
                            CASE
                                WHEN a2.qty_done = 0::numeric THEN a2.product_qty
                                ELSE a2.qty_done
                            END
                            ELSE 0::numeric
                        END AS por_ingresar, 
                        CASE
                            WHEN a2.estado::text = 'done'::text AND a2.ruta = true AND a2.mov_interno = true THEN a2.saldo
                            ELSE 0::numeric
                        END AS transito, 
                    0 AS salida_espera, 0 AS reservas, a2.estado, a2.id, a2.date, a2.lote
                   FROM ( SELECT distinct pp.product_tmpl_id, 
                            vst_kardex_fisico.product_id, 
                            vst_kardex_fisico.location_dest_id AS ubicacion, 
                            vst_kardex_fisico.product_qty AS saldo, 
                            vst_kardex_fisico.estado, sp.en_ruta AS ruta, 
                            vst_kardex_fisico.product_qty as qty_done, vst_kardex_fisico.product_qty, 
                            l_d.usage::text = 'internal'::text AND l_o.usage::text = 'internal'::text AS mov_interno, 
                            vst_kardex_fisico.id,
                            vst_kardex_fisico.date,spl.id as lote
                           FROM vst_kardex_fisico_acero vst_kardex_fisico
                      JOIN product_product pp ON pp.id = vst_kardex_fisico.product_id
                 JOIN stock_move sm ON sm.id = vst_kardex_fisico.id

   LEFT JOIN stock_quant_move_rel sqml on sqml.move_id = sm.id
   LEFT JOIN stock_quant sq on sq.id = sqml.quant_id
   LEFT JOIN stock_production_lot spl on spl.id = sq.lot_id

            JOIN stock_picking sp ON sm.picking_id = sp.id
       JOIN stock_location l_o ON l_o.id = vst_kardex_fisico.location_id
   JOIN stock_location l_d ON l_d.id = vst_kardex_fisico.location_dest_id

   LEFT JOIN stock_location slt ON slt.id = vst_kardex_fisico.location_dest_id
  WHERE slt.usage::text = 'internal'::text AND vst_kardex_fisico.date::date IS NOT NULL) a2) total;

